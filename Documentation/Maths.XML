<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Maths</name>
    </assembly>
    <members>
        <member name="T:Maths.Answer">
            <summary>
            Reponse to a question from an exercice
            </summary>
        </member>
        <member name="M:Maths.Answer.#ctor(System.String,Maths.SequenceProof)">
            <summary>
            Default constructor
            </summary>
            <param name="p">proposal</param>
            <param name="s">sequence</param>
        </member>
        <member name="M:Maths.Answer.ToDocument(System.Windows.Documents.BlockCollection)">
            <summary>
            Transforms equation object into a tex representation
            </summary>
            <param name="c">block collection</param>
        </member>
        <member name="M:Maths.Answer.ToString">
            <summary>
            Transforms equation object into a string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="T:Maths.Applicatifs">
            <summary>
            Fonctions qui implémentent les documents (FlowDocument)
            </summary>
        </member>
        <member name="M:Maths.Applicatifs.Menu">
            <summary>
            Fonction de menu
            </summary>
            <returns></returns>
        </member>
        <member name="M:Maths.Applicatifs.Button_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When click on button 1
            </summary>
            <param name="sender">source window</param>
            <param name="e">args</param>
        </member>
        <member name="M:Maths.Applicatifs.SetButtonStyle(System.Windows.Controls.Button)">
            <summary>
            Set the button style
            </summary>
            <param name="b">button</param>
        </member>
        <member name="M:Maths.Applicatifs.Newton">
            <summary>
            Développement polynôme
            </summary>
            <returns></returns>
        </member>
        <member name="M:Maths.Applicatifs.ReloadNewton">
            <summary>
            Lecture fichier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Maths.Applicatifs.ResolutionPolynome2Somme">
            <summary>
            Résolution polynôme ordre 2
            </summary>
        </member>
        <member name="M:Maths.Applicatifs.ResolutionPolynome2Difference">
            <summary>
            Résolution polynôme ordre 2
            </summary>
        </member>
        <member name="M:Maths.Applicatifs.Polynome2Produit">
            <summary>
            Résolution polynôme ordre 2 par produit
            </summary>
            <returns>document</returns>
        </member>
        <member name="M:Maths.Applicatifs.ResolutionPolynome3">
            <summary>
            Résolution polynôme ordre 2
            </summary>
        </member>
        <member name="M:Maths.Applicatifs.ComputeImageSize">
            <summary>
            Computes image size
            </summary>
            <returns></returns>
        </member>
        <member name="E:Maths.Applicatifs.onButtonClick">
            <summary>
            Evenement sur click des boutons
            </summary>
        </member>
        <member name="E:Maths.Applicatifs.ButtonClicked">
            <summary>
            Event handler for clicked button
            </summary>
        </member>
        <member name="T:Maths.ClipBox">
            <summary>
            Logique d'interaction pour ClipBox.xaml
            </summary>
            <summary>
            ClipBox
            </summary>
        </member>
        <member name="F:Maths.ClipBox.TranslateXProperty">
            <summary>
            Translation on x axis to show a partial of picture
            </summary>
        </member>
        <member name="F:Maths.ClipBox.TranslateYProperty">
            <summary>
            Translation on y axis to show a partial of picture
            </summary>
        </member>
        <member name="F:Maths.ClipBox.ScaleProperty">
            <summary>
            Scale on x and y axis to zoom into picture
            </summary>
        </member>
        <member name="F:Maths.ClipBox.startedMousePosition">
            <summary>
            Point where starting mouse moving arround
            </summary>
        </member>
        <member name="F:Maths.ClipBox.currentTranslation">
            <summary>
            Point where translation has started
            </summary>
        </member>
        <member name="F:Maths.ClipBox.duringMove">
            <summary>
            Enable mouse moving control
            </summary>
        </member>
        <member name="M:Maths.ClipBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Maths.ClipBox.mouseOff(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            mouse leave event
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">mouse args</param>
        </member>
        <member name="M:Maths.ClipBox.mouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            mouse move arround control
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">mouse args</param>
        </member>
        <member name="M:Maths.ClipBox.Translate(System.Double,System.Double)">
            <summary>
            Translation on x and y axis
            </summary>
            <param name="dx">x move</param>
            <param name="dy">y move</param>
            <returns>true if not out of bounds</returns>
        </member>
        <member name="M:Maths.ClipBox.mouseOn(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            When the mouse button was pressed down
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">mouse args</param>
        </member>
        <member name="M:Maths.ClipBox.Scale(System.Double)">
            <summary>
            Scale image
            </summary>
            <param name="d">number &gt; 0.0</param>
            <returns>true if not out of bounds</returns>
        </member>
        <member name="M:Maths.ClipBox.increaseZoom_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When the zoom value increases
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">args</param>
        </member>
        <member name="M:Maths.ClipBox.decreaseZoom_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When the zoom value decreases
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">args</param>
        </member>
        <member name="M:Maths.ClipBox.w_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When ui was loaded
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">args</param>
        </member>
        <member name="M:Maths.ClipBox.w_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            When ui is resized
            </summary>
            <param name="sender">ui origin</param>
            <param name="e">args</param>
        </member>
        <member name="M:Maths.ClipBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Maths.ClipBox.Tracer">
            <summary>
            Gets or sets the tracer object
            </summary>
        </member>
        <member name="T:Maths.Coordinates">
            <summary>
            Coordonnées d'un système de dimension n
            </summary>
        </member>
        <member name="F:Maths.Coordinates.dim">
            <summary>
            dimension
            </summary>
        </member>
        <member name="F:Maths.Coordinates.position">
            <summary>
            Sous-dimension
            </summary>
        </member>
        <member name="F:Maths.Coordinates.value">
            <summary>
            Value in one dimension
            </summary>
        </member>
        <member name="M:Maths.Coordinates.#ctor(System.UInt32)">
            <summary>
            Constructor for a coordinates
            given its dimension
            </summary>
            <param name="dimension">dimension</param>
        </member>
        <member name="M:Maths.Coordinates.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor with each value at each dimension
            </summary>
            <param name="positions">values</param>
        </member>
        <member name="M:Maths.Coordinates.#ctor(System.Double[])">
            <summary>
            Constructor with each value at each dimension
            </summary>
            <param name="positions">values</param>
        </member>
        <member name="P:Maths.Coordinates.Euclidian">
            <summary>
            Gets the euclidian sub-coordinates
            </summary>
        </member>
        <member name="P:Maths.Coordinates.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Maths.Coordinates.Dimension">
            <summary>
            Gets the dimension number
            </summary>
        </member>
        <member name="T:Maths.Vector">
            <summary>
            Vecteur de coordonnées
            </summary>
        </member>
        <member name="F:Maths.Vector.start">
            <summary>
            Vecteur de coordonnées
            </summary>
        </member>
        <member name="F:Maths.Vector.end">
            <summary>
            Vecteur de coordonnées
            </summary>
        </member>
        <member name="M:Maths.Vector.#ctor(System.UInt32)">
            <summary>
            Constructor for a vector
            given a dimension
            </summary>
            <param name="dimension">dimension</param>
        </member>
        <member name="M:Maths.Vector.#ctor(Maths.Coordinates,Maths.Coordinates)">
            <summary>
            Constructor of a vector
            with two coordinates
            at same dimension
            </summary>
            <param name="a">coordinate one</param>
            <param name="b">coordinate two</param>
        </member>
        <member name="P:Maths.Vector.Euclidian">
            <summary>
            Gets the euclidian sub-vector
            </summary>
        </member>
        <member name="P:Maths.Vector.From">
            <summary>
            Gets the start of coordinate
            </summary>
        </member>
        <member name="P:Maths.Vector.To">
            <summary>
            Gets the end of coordinate
            </summary>
        </member>
        <member name="T:Maths.CoordinateSystem">
            <summary>
            Système de coordonnées
            </summary>
        </member>
        <member name="F:Maths.CoordinateSystem.dim">
            <summary>
            Dimension du système
            </summary>
        </member>
        <member name="F:Maths.CoordinateSystem.coords">
            <summary>
            Coordonnées du système
            </summary>
        </member>
        <member name="F:Maths.CoordinateSystem.move">
            <summary>
            moving values
            </summary>
        </member>
        <member name="M:Maths.CoordinateSystem.#ctor(System.UInt32)">
            <summary>
            Constructor for a coordinate system
            </summary>
            <param name="dimension">dimension</param>
        </member>
        <member name="M:Maths.CoordinateSystem.#ctor(Maths.MovingCoordinates)">
            <summary>
            Coordinate system with a limit and a step
            </summary>
            <param name="m">move</param>
        </member>
        <member name="M:Maths.CoordinateSystem.Add(System.Double[])">
            <summary>
            Add a new coordinates into this system
            </summary>
            <param name="coords">coordinate</param>
        </member>
        <member name="M:Maths.CoordinateSystem.Add(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add a new coordinates into this system
            </summary>
            <param name="coords">coordinate</param>
        </member>
        <member name="M:Maths.CoordinateSystem.Add(Maths.Coordinates)">
            <summary>
            Add an existing coordinates into this system
            </summary>
            <param name="c">coordinate</param>
        </member>
        <member name="M:Maths.CoordinateSystem.Add(PersistantModel.Arithmetic,System.Collections.Generic.IEnumerable{System.String},System.Double[])">
            <summary>
            Add a new coordinate into this system
            </summary>
            <param name="f">function</param>
            <param name="nameTerms">terms identified by name and ordered as same to coords</param>
            <param name="coords">coordinate</param>
        </member>
        <member name="P:Maths.CoordinateSystem.Dimension">
            <summary>
            Gets the dimension of this system
            </summary>
        </member>
        <member name="P:Maths.CoordinateSystem.Coordinates">
            <summary>
            Gets all coordinates
            </summary>
        </member>
        <member name="T:Maths.MovingCoordinates">
            <summary>
            A movement
            </summary>
        </member>
        <member name="F:Maths.MovingCoordinates.limit">
            <summary>
            Limits
            </summary>
        </member>
        <member name="F:Maths.MovingCoordinates.steps">
            <summary>
            Moving steps
            </summary>
        </member>
        <member name="M:Maths.MovingCoordinates.#ctor(Maths.Vector,Maths.Coordinates)">
            <summary>
            Moving element
            </summary>
            <param name="v">vector limit</param>
            <param name="s">steps</param>
        </member>
        <member name="M:Maths.MovingCoordinates.GenerateMove">
            <summary>
            Generates move steps
            </summary>
            <returns>Moving Vector</returns>
        </member>
        <member name="M:Maths.MovingCoordinates.Floor(Maths.Coordinates)">
            <summary>
            Computes floor values
            </summary>
            <param name="c">coordinate</param>
            <returns>floor coordinate</returns>
        </member>
        <member name="P:Maths.MovingCoordinates.Vector">
            <summary>
            Gets the vector limit
            </summary>
        </member>
        <member name="P:Maths.MovingCoordinates.Steps">
            <summary>
            Gets the steps for each dimension
            </summary>
        </member>
        <member name="T:Maths.MovingVector">
            <summary>
            Vecteur en mouvement
            </summary>
        </member>
        <member name="F:Maths.MovingVector.dim">
            <summary>
            Dimension
            </summary>
        </member>
        <member name="F:Maths.MovingVector.position">
            <summary>
            Sous-dimension
            </summary>
        </member>
        <member name="F:Maths.MovingVector.values">
            <summary>
            List of values for one dimension
            </summary>
        </member>
        <member name="M:Maths.MovingVector.#ctor(System.UInt32)">
            <summary>
            Constructor for a coordinates
            given its dimension
            </summary>
            <param name="dimension">dimension</param>
        </member>
        <member name="M:Maths.MovingVector.#ctor(System.Double[])">
            <summary>
            Constructor with each value at each dimension
            </summary>
            <param name="positions">values</param>
        </member>
        <member name="M:Maths.MovingVector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor with each value at each dimension
            </summary>
            <param name="positions">values</param>
        </member>
        <member name="M:Maths.MovingVector.#ctor(Maths.MovingCoordinates)">
            <summary>
            Constructor for a move with multi-dimensional array
            </summary>
            <param name="move">move</param>
        </member>
        <member name="M:Maths.MovingVector.Add(System.Double)">
            <summary>
            Add just one value on the first dimension
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Maths.MovingVector.Add(System.Double[])">
            <summary>
            Add multi-values of moving at each dimension
            </summary>
            <param name="positions">position list</param>
        </member>
        <member name="M:Maths.MovingVector.Add(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add multi-values of moving at each dimension
            </summary>
            <param name="positions">position list</param>
        </member>
        <member name="P:Maths.MovingVector.Dimension">
            <summary>
            Gets the dimension
            </summary>
        </member>
        <member name="P:Maths.MovingVector.Values">
            <summary>
            List of each values as the movement
            </summary>
        </member>
        <member name="P:Maths.MovingVector.Euclidian">
            <summary>
            Gets the euclidian sub-vector
            </summary>
        </member>
        <member name="T:Maths.Line">
            <summary>
            A line is a 1D graphical representaion of a moving vector
            at least one dimension
            this is a projection of a n-vector by one dimension
            A projection function must be used to compute each acurate speed values
            </summary>
        </member>
        <member name="F:Maths.Line.move">
            <summary>
            A moving n-vector
            </summary>
        </member>
        <member name="F:Maths.Line.function">
            <summary>
            Projection function
            </summary>
        </member>
        <member name="F:Maths.Line.result">
            <summary>
            Coordonnées en mouvement à 1 dimension
            </summary>
        </member>
        <member name="F:Maths.Line.terms">
            <summary>
            Each term of the arithmetic function
            is relative to a value at each coordinates
            the dimension is exactly equal to the number of terms
            
            The arithmetic function can use all terms or less
            If the arithmetic function is not calculable after all given value for each term
            then it will throw an exception
            </summary>
        </member>
        <member name="F:Maths.Line.nameTerms">
            <summary>
            all terms affected with their names
            </summary>
        </member>
        <member name="M:Maths.Line.#ctor(Maths.MovingVector,PersistantModel.Arithmetic)">
            <summary>
            Constructor with a moving vector
            and an arithmetic function
            </summary>
            <param name="m">move</param>
            <param name="f">function</param>
        </member>
        <member name="M:Maths.Line.Iteration(System.Collections.Generic.List{System.UInt32},System.UInt32,Maths.MovingVector)">
            <summary>
            Iteration get each values for each term
            use the first term to reach it by the computation of the function
            </summary>
            <param name="indexes">list of indexes position</param>
            <param name="depth">depth value</param>
            <param name="m">vector</param>
            <returns>values</returns>
        </member>
        <member name="M:Maths.Line.Iteration">
            <summary>
            Iterate all elements and play each values
            </summary>
        </member>
        <member name="M:Maths.Line.Calculate(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculate function value
            given each values with each name of terms
            to evaluate
            </summary>
            <param name="values">values to set each terms</param>
            <returns>a double value as the calculation result</returns>
        </member>
        <member name="T:Maths.Plan">
            <summary>
            A plan is a 2D graphical representation of a moving vector
            at least 2 or more dimension
            </summary>
        </member>
        <member name="T:Maths.DistributedTracer2D">
            <summary>
            Distributed Tracer
            Distribute squares parts to
            multiple tasks
            Each task traces points
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.depth">
            <summary>
            profondeur de tâches
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.bounds">
            <summary>
            Bounds of coordinates
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.columnSize">
            <summary>
            Number of columns
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.rowSize">
            <summary>
            Number of lines
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.pixels">
            <summary>
            Pixelization on graphics
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.imageSize">
            <summary>
            Size of the resulting image
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.visualLocation">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.visualSize">
            <summary>
            Taille du visual
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.visualScale">
            <summary>
            scale for zooming
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.areas">
            <summary>
            Areas of each image part
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.ra">
            <summary>
            Random numbers
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.boundsChanged">
            <summary>
            if bounds has changed
            </summary>
        </member>
        <member name="F:Maths.DistributedTracer2D.drawing">
            <summary>
            Drawing object to handle the curve
            </summary>
        </member>
        <member name="M:Maths.DistributedTracer2D.#ctor(Maths.MovingCoordinates,System.UInt32,System.UInt32,System.UInt32,System.Windows.Size)">
            <summary>
            Default Constructor
            </summary>
            <param name="mc">Moving Coordinates</param>
            <param name="column">column size</param>
            <param name="row">row size</param>
            <param name="depth">depth</param>
            <param name="p">pixels size</param>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeImageHeight(System.UInt32)">
            <summary>
            Function to compute the height of image
            </summary>
            <param name="depth">depth image definition</param>
            <returns>total height of image</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeImageWidth(System.UInt32)">
            <summary>
            Function to compute the width of image
            </summary>
            <param name="depth">depth image definition</param>
            <returns>total width of image</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeImageSize">
            <summary>
            Computes the size of image
            </summary>
            <returns>total size of image</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeHeightSteps">
            <summary>
            Compute the exact height of the total image height in pixels
            </summary>
            <returns>image height in pixels</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeWidthSteps">
            <summary>
            Compute the exact height of the total image height in pixels
            </summary>
            <returns>image height in pixels</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeCuttedHeightAreas">
            <summary>
            Compute each area size for recursive image uniform height
            </summary>
            <returns>list of area</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeCuttedWidthAreas">
            <summary>
            Compute each area size for recursive image uniform width
            </summary>
            <returns>list of area</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.ComputeCuttedAreas">
            <summary>
            Compute a list of areas
            </summary>
            <returns>size of each area</returns>
        </member>
        <member name="M:Maths.DistributedTracer2D.Draw">
            <summary>
            A l'aide de la taille de l'image,
            du nombre de colonnes et du nombres de lignes,
            des bornes de la graduation et de
            la fonction mathématique, créer une image
            </summary>
        </member>
        <member name="M:Maths.DistributedTracer2D.GetThumbnail(System.Double,System.Double,System.Double,System.Double,System.Double,System.Windows.Controls.ContentControl)">
            <summary>
            Récupère une image du visual créé
            </summary>
            <param name="left">translation horizontale</param>
            <param name="right">translation verticale</param>
            <param name="desiredWidth">largeur demandée</param>
            <param name="desiredHeight">hauteur demandée</param>
            <param name="scale">scale value</param>
            <param name="attach">container</param>
        </member>
        <member name="P:Maths.DistributedTracer2D.VisualLocation">
            <summary>
            Position de l'image (en nombre de pixels)
            </summary>
        </member>
        <member name="P:Maths.DistributedTracer2D.ImageSize">
            <summary>
            Taille de l'image (en nombre de pixels)
            </summary>
        </member>
        <member name="P:Maths.DistributedTracer2D.Areas">
            <summary>
            Gets area set
            </summary>
        </member>
        <member name="P:Maths.DistributedTracer2D.VisualSize">
            <summary>
            Gets or sets visual size
            </summary>
        </member>
        <member name="P:Maths.DistributedTracer2D.VisualScale">
            <summary>
            Gets or sets visual scale
            </summary>
        </member>
        <member name="T:Maths.TemplateTracer2D">
            <summary>
            Tracer en deux dimensions
            </summary>
        </member>
        <member name="M:Maths.TemplateTracer2D.#ctor">
            <summary>
            Constructor as a coordinate system
            </summary>
        </member>
        <member name="T:Maths.MathematicEquation">
            <summary>
            Equation class
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorEqual">
            <summary>
            Equal operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorAdd">
            <summary>
            Add operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorSubstract">
            <summary>
            Sub operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorProduct">
            <summary>
            Product operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorDivide">
            <summary>
            Divide operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorPower">
            <summary>
            Product operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorRoot">
            <summary>
            Divide operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorMultipleAdd">
            <summary>
            Multiple addition operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorMultipleProduct">
            <summary>
            Multiple product operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorPositive">
            <summary>
            Positive operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorNegative">
            <summary>
            Negative operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.OperatorInverse">
            <summary>
            Inverse operator ID
            </summary>
        </member>
        <member name="F:Maths.MathematicEquation.eq">
            <summary>
            Equation
            </summary>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor">
            <summary>
            Default constructor
            create an equality of 0 = 0
            </summary>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor(System.Double)">
            <summary>
            Create an equation
            given a numeric value
            </summary>
            <param name="c">numeric value</param>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor(System.String,Interfaces.IEquation,Interfaces.IEquation)">
            <summary>
            Create an equation
            with a given operator
            and two operands
            </summary>
            <param name="op">operator name</param>
            <param name="e1">operand one</param>
            <param name="e2">operand two</param>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor(System.String,Interfaces.IEquation)">
            <summary>
            Create an equation
            with a given operator
            and one operand
            </summary>
            <param name="op">operator name</param>
            <param name="e">operand</param>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor(System.String,System.Double)">
            <summary>
            Constructor to create a coefficient
            </summary>
            <param name="letter">coefficient letter</param>
            <param name="value">value</param>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor(System.String,Interfaces.IArithmetic)">
            <summary>
            Constructor to create an unknown term
            </summary>
            <param name="letter">unknown letter</param>
            <param name="value">value</param>
        </member>
        <member name="M:Maths.MathematicEquation.#ctor(Interfaces.IArithmetic,Interfaces.IArithmetic,Interfaces.IArithmetic)">
            <summary>
            Constructor to create a term
            </summary>
            <param name="constant">constant equation</param>
            <param name="coef">coefficient equation</param>
            <param name="x">equation</param>
        </member>
        <member name="M:Maths.MathematicEquation.AsRepresented(System.String)">
            <summary>
            String representation of the algebraic equation
            </summary>
            <param name="type">type representation</param>
            <returns>string text</returns>
        </member>
        <member name="M:Maths.MathematicEquation.ToTex">
            <summary>
            Transforms equation object into a tex representation
            </summary>
            <returns>tex representation</returns>
        </member>
        <member name="M:Maths.MathematicEquation.Calculate(System.Boolean)">
            <summary>
            Calculate the result of this equation
            terms that are valued are operated with its numeric value
            </summary>
            <param name="clean">true if calculate again</param>
            <returns>string representation number or algebraic</returns>
        </member>
        <member name="M:Maths.MathematicEquation.Develop">
            <summary>
            Develop equation
            works only on a current equation as a product
            </summary>
            <returns>developed equation</returns>
        </member>
        <member name="M:Maths.MathematicEquation.Factorize">
            <summary>
            Factorization of an equation
            works only on a current equation as an addition
            </summary>
            <returns>factorized equation</returns>
        </member>
        <member name="M:Maths.MathematicEquation.Let(System.String,Interfaces.IEquation)">
            <summary>
            Let a letter as an arithmetic operation
            </summary>
            <param name="letter">letter value</param>
            <param name="e">arithmetic expression</param>
        </member>
        <member name="M:Maths.MathematicEquation.Let(System.String,System.Double)">
            <summary>
            Let a letter as a value
            given a letter and its value
            </summary>
            <param name="letter">letter value</param>
            <param name="value">numeric value</param>
        </member>
        <member name="M:Maths.MathematicEquation.Transform">
            <summary>
            Transform the current equation to an
            another equation
            </summary>
            <returns>transformed equation</returns>
        </member>
        <member name="P:Maths.MathematicEquation.IsCalculable">
            <summary>
            Gets true if equation is calculable
            </summary>
        </member>
        <member name="P:Maths.MathematicEquation.Coefficients">
            <summary>
            Gets all coefficients terms
            </summary>
        </member>
        <member name="P:Maths.MathematicEquation.Constants">
            <summary>
            Gets all constant values
            </summary>
        </member>
        <member name="P:Maths.MathematicEquation.UnknownTerms">
            <summary>
            Gets all unknown terms
            </summary>
        </member>
        <member name="P:Maths.MathematicEquation.Equation">
            <summary>
            Gets the underlying arithmetic operation
            </summary>
        </member>
        <member name="M:Maths.GenericNeurone.Exec">
            <summary>
            Exécute le travail du neurone
            </summary>
        </member>
        <member name="M:Maths.GenericNeurone.Learn">
            <summary>
            Apprentissage pour la construction
            des neurones
            </summary>
        </member>
        <member name="P:Maths.GenericNeurone.Id">
            <summary>
            Identifiant unique
            </summary>
        </member>
        <member name="P:Maths.GenericNeurone.Name">
            <summary>
            Nom du neurone
            </summary>
        </member>
        <member name="P:Maths.GenericNeurone.Type">
            <summary>
            Type du neurone
            </summary>
        </member>
        <member name="T:Maths.Exercice">
            <summary>
            Implémente un exercice
            à résoudre
            </summary>
        </member>
        <member name="F:Maths.Exercice.idName">
            <summary>
            Numéro d'exercice
            </summary>
        </member>
        <member name="M:Maths.Exercice.#ctor(System.UInt32,System.String,System.String,Maths.Answer)">
            <summary>
            Default constructor
            given a number, the question phrase and a short notice
            </summary>
            <param name="numero">number</param>
            <param name="q">question</param>
            <param name="note">notice</param>
            <param name="a">answer</param>
        </member>
        <member name="M:Maths.Exercice.ToDocument(System.Windows.Documents.List)">
            <summary>
            Transforms equation object into a tex representation
            </summary>
            <param name="l">list document</param>
        </member>
        <member name="M:Maths.Exercice.ToString">
            <summary>
            Transforms equation object into a string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="T:Maths.SequenceProof">
            <summary>
            Une séquence pour prouver un résultat
            au cours d'un exercice
            </summary>
        </member>
        <member name="M:Maths.SequenceProof.#ctor">
            <summary>
            Default constructor
            Empty data
            </summary>
        </member>
        <member name="M:Maths.SequenceProof.#ctor(Interfaces.IDocument[])">
            <summary>
            Constructor
            given a list of arithmetic equation
            </summary>
            <param name="eq">document element</param>
        </member>
        <member name="M:Maths.SequenceProof.Add(Interfaces.IDocument[])">
            <summary>
            Ajout d'éléments dans la liste
            </summary>
            <param name="items">éléments à ajouter</param>
        </member>
        <member name="M:Maths.SequenceProof.ToDocument(System.Windows.Documents.BlockCollection)">
            <summary>
            Transforms equation object into a tex representation
            </summary>
            <param name="c">block collection</param>
        </member>
        <member name="M:Maths.SequenceProof.ToString">
            <summary>
            Transforms equation object into a string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="P:Maths.SequenceProof.Items">
            <summary>
            Gets all items
            </summary>
        </member>
        <member name="T:Maths.TopLevelArithmeticModel">
            <summary>
            This is the top level arithmetic
            model to be save or load from a binary file
            </summary>
        </member>
        <member name="F:Maths.TopLevelArithmeticModel.versionName">
            <summary>
            Version model
            </summary>
        </member>
        <member name="F:Maths.TopLevelArithmeticModel.wordingListName">
            <summary>
            Equation list
            </summary>
        </member>
        <member name="F:Maths.TopLevelArithmeticModel.titleName">
            <summary>
            title of the file
            </summary>
        </member>
        <member name="F:Maths.TopLevelArithmeticModel.revisionName">
            <summary>
            Revision number
            </summary>
        </member>
        <member name="M:Maths.TopLevelArithmeticModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Maths.TopLevelArithmeticModel.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Maths.TopLevelArithmeticModel.Create(System.String)">
            <summary>
            Create a new top level class
            </summary>
        </member>
        <member name="M:Maths.TopLevelArithmeticModel.Load(System.IO.FileInfo)">
            <summary>
            Load a top level arithmetic model
            from an existing file
            </summary>
            <param name="fi">file info to take</param>
            <returns>object deserialized</returns>
        </member>
        <member name="M:Maths.TopLevelArithmeticModel.Save(System.IO.FileInfo)">
            <summary>
            Load a top level arithmetic model
            from an existing file
            </summary>
            <param name="fi">file info to take</param>
            <returns>object deserialized</returns>
        </member>
        <member name="P:Maths.TopLevelArithmeticModel.WordingList">
            <summary>
            Gets equation list
            </summary>
        </member>
        <member name="P:Maths.TopLevelArithmeticModel.Version">
            <summary>
            Gets or sets version number
            </summary>
        </member>
        <member name="P:Maths.TopLevelArithmeticModel.Title">
            <summary>
            Gets or sets the title
            </summary>
        </member>
        <member name="P:Maths.TopLevelArithmeticModel.Revision">
            <summary>
            Gets or sets the revision number
            </summary>
        </member>
        <member name="T:Maths.Tracer">
            <summary>
            Logique d'interaction pour Tracer.xaml
            </summary>
            <summary>
            Tracer
            </summary>
        </member>
        <member name="M:Maths.Tracer.#ctor">
            <summary>
            Tracer
            </summary>
        </member>
        <member name="M:Maths.Tracer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Maths.DataTracer2D">
            <summary>
            Tracer en deux dimensions
            </summary>
        </member>
        <member name="F:Maths.DataTracer2D.sys">
            <summary>
            Système de coordonnées
            </summary>
        </member>
        <member name="F:Maths.DataTracer2D.from">
            <summary>
            bornes limites à gauche et à droite
            </summary>
        </member>
        <member name="F:Maths.DataTracer2D.to">
            <summary>
            bornes limites à gauche et à droite
            </summary>
        </member>
        <member name="F:Maths.DataTracer2D.intervals">
            <summary>
            Série d'intervalles
            </summary>
        </member>
        <member name="F:Maths.DataTracer2D.function">
            <summary>
            arithmetic function
            </summary>
        </member>
        <member name="F:Maths.DataTracer2D.drawer">
            <summary>
            To draw
            </summary>
        </member>
        <member name="M:Maths.DataTracer2D.#ctor">
            <summary>
            Constructor as a coordinate system
            </summary>
        </member>
        <member name="M:Maths.DataTracer2D.DrawLines(Maths.Coordinates,Maths.Coordinates,Maths.Coordinates,System.Windows.Media.DrawingContext,System.Windows.Media.Pen)">
            <summary>
            Draw lines
            </summary>
            <param name="start">first point</param>
            <param name="end">last point</param>
            <param name="interval">interval between two points</param>
            <param name="dc">drawing context</param>
            <param name="p">pen for the draw</param>
        </member>
        <member name="M:Maths.DataTracer2D.DrawGrad">
            <summary>
            Dessine la graduation
            </summary>
        </member>
        <member name="M:Maths.DataTracer2D.DrawCurve">
            <summary>
            Draw the curve
            </summary>
        </member>
        <member name="T:Maths.Tracer2D">
            <summary>
            Logique d'interaction pour Tracer2D.xaml
            </summary>
            <summary>
            Tracer2D
            </summary>
        </member>
        <member name="F:Maths.Tracer2D.DistributedTracerProperty">
            <summary>
            Property to set the graphical tracer algorithm
            </summary>
        </member>
        <member name="M:Maths.Tracer2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Maths.Tracer2D.Update(System.Windows.Point,System.Windows.Size,System.Double)">
            <summary>
            Mise à jour de la taille du tracé
            </summary>
        </member>
        <member name="M:Maths.Tracer2D.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Maths.Tracer2D.Tracer">
            <summary>
            Gets or sets the tracer object
            </summary>
        </member>
        <member name="T:Maths.Wording">
            <summary>
            Classe de description d'un énonçé
            de mathématique
            </summary>
        </member>
        <member name="F:Maths.Wording.titleName">
            <summary>
            Titre de l'énonçé
            </summary>
        </member>
        <member name="F:Maths.Wording.descName">
            <summary>
            Description de l'énonçé
            </summary>
        </member>
        <member name="F:Maths.Wording.exercicesName">
            <summary>
            Ensemble des exercices
            </summary>
        </member>
        <member name="M:Maths.Wording.#ctor(System.String,System.String,Maths.Exercice[])">
            <summary>
            Default constructor
            </summary>
            <param name="title">titre</param>
            <param name="desc">description</param>
            <param name="ex">exercices</param>
        </member>
        <member name="M:Maths.Wording.Add(Maths.Exercice)">
            <summary>
            Add a new exercice
            </summary>
            <param name="e">exercice</param>
        </member>
        <member name="M:Maths.Wording.ToDocument(System.Windows.Documents.FlowDocument)">
            <summary>
            Transforms equation object into a tex representation
            </summary>
            <param name="f">flow document</param>
        </member>
        <member name="M:Maths.Wording.ToString">
            <summary>
            Transforms equation object into a string representation
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
